#!/usr/bin/env python3
import ipaddress
import argparse
import os
import sys
import subprocess as sp
from typing import *

LO_ADDR="127.0.0.1"
LO6_ADDR="::1"
TEMPLATE_PATH="./v2ray-rules-template"


def srun(command: str):
    sp.run(command, shell=True, check=True)


def add_element(elements: List[str], set: str):
    element_str = "{ " + ", ".join(elements) + " }"
    srun("nft add element inet v2ray {} {}".format(set, element_str))


def main():
    parser = argparse.ArgumentParser(description="cli parser")
    parser.add_argument("-r", action="store_true", help="remove all nftables rules, this overrides all other flags")
    parser.add_argument("-u", action="store_true", help="whether or not to tproxy udp traffic")
    parser.add_argument("-p", metavar="PORT", action="store", type=str, required="-r" not in sys.argv,
                        help="port of your dokodemo-door, required if -r is not present")
    parser.add_argument("-m", metavar="MARK", action="store", default=255, type=int,
                        help="the packet mark that you've set in v2ray, 255 is used if not specified")
    parser.add_argument("-sbp", metavar="BYPASSED SOURCE", action="append", default=[], type=str,
                        help="An ip or cidr block whose traffic your don't want to be forwarded"
                             ", can be used multiple times to specify multiple ips")
    parser.add_argument("-sfw", metavar="FORWARDED SOURCE", action="append", default=[], type=str,
                        help="An ip or cidr block whose traffic your want to be force forwarded"
                             ", can be used multiple times to specify multiple ips")
    parser.add_argument("-dbp", metavar="BYPASSED DESTINATION", action="append", default=[], type=str,
                        help="A list of ip addresses or cidr blocks that you want to be bypassed,"
                             "can be used multiple times to specify multiple lists")
    parser.add_argument("-dfw", metavar="FORWARDED DESTINATION", action="append", default=[], type=str,
                        help="A list of ip addresses or cidr blocks that your want to be forwarded"
                             "can be used multiple times to specify multiple lists")
    parsed = parser.parse_args()

    if os.getuid() != 0:
        print("\033[91m" + "Not running as root, stopped" + "\033[0m", file=sys.stderr)
        sys.exit(1)
    
    if parsed.r:
        srun("nft delete table inet v2ray")
        print("removed all rules", file=sys.stdout)
        sys.exit(0)
    
    srun(TEMPLATE_PATH)

    srun("nft add rule inet v2ray v2ray_SERVER_AC meta mark {} accept".format(parsed.m))
    
    srun("nft add rule inet v2ray v2ray_FW tcp dport 1-65535 dnat ip to {}:{}".format(LO_ADDR, parsed.p))
    srun("nft add rule inet v2ray v2ray_FW tcp dport 1-65535 dnat ip6 to {}:{}".format(LO6_ADDR, parsed.p))

    if parsed.u:
        srun("nft add rule inet v2ray v2ray_FW udp dport 1-65535 meta mark set 1 tproxy ip to {}:{}".format(LO_ADDR, parsed.p))
        srun("nft add rule inet v2ray v2ray_FW udp dport 1-65535 mata mark set 1 tproxy ip6 to {}:{}".format(LO6_ADDR, parsed.p))
    
    sbpv4 = []
    sbpv6 = []
    for cidr_block in parsed.sbp:
        network = ipaddress.ip_network(cidr_block)
        if network.version == 4:
            sbpv4.append(str(network))
        else:
            sbpv6.append(str(network))
    if sbpv6:
        add_element(sbpv6, "ipv6_src_bp")
    if sbpv4:
        add_element(sbpv4, "ipv4_src_bp")
    
    sfwv4 = []
    sfwv6 = []
    for cidr_block in parsed.sbp:
        network = ipaddress.ip_network(cidr_block)
        if network.version == 4:
            sfwv4.append(str(network))
        else:
            sfwv6.append(str(network))
    if sfwv6:
        add_element(sfwv6, "ipv6_src_fw")
    if sfwv4:
        add_element(sfwv4, "ipv4_src_fw")
    
    dbpv4=[]
    dbpv6=[]
    for path in parsed.dbp:
        with open(os.path.abspath(os.path.expanduser(path))) as f:
            for line in f:
                stripped = line.strip("\n")
                if stripped:
                    network = ipaddress.ip_network(stripped)
                    if network.version == 4:
                        dbpv4.append(str(network))
                    else:
                        dbpv6.append(str(network))
    if dbpv4:
        add_element(dbpv4, "ipv4_dst_bp")
    if dbpv6:
        add_element(dbpv6, "ipv6_dst_bp")
    
    dfwv4=[]
    dfwv6=[]
    for path in parsed.dbp:
        with open(os.path.abspath(os.path.expanduser(path))) as f:
            for line in f:
                stripped = line.strip("\n")
                if stripped:
                    network = ipaddress.ip_network(stripped)
                    if network.version == 4:
                        dfwv4.append(str(network))
                    else:
                        dfwv6.append(str(network))
    if dfwv4:
        add_element(dfwv4, "ipv4_dst_bp")
    if dfwv6:
        add_element(dfwv6, "ipv6_dst_bp")

    print("added rules", file=sys.stdout)
    sys.exit(0)


if __name__ == "__main__":
    main()
